{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{GoogleMap,useJsApiLoader,useLoadScript,Marker,InfoWindow,Autocomplete,Polygon}from\"@react-google-maps/api\";import{mapConfig}from\"./../util/Config\";import Geocode from\"react-geocode\";import\"./MapView.scss\";const containerStyle={width:\"100%\",height:\"100%\"};const divStyle={color:\"#434343\",fontFamily:\"Dubai\",fontSize:14,maxWidth:\"200px\"};function MapView(props){const{isLoaded}=useJsApiLoader({id:\"google-map-script\",googleMapsApiKey:mapConfig.apiKey,libraries:mapConfig.libraries});const[map,setMap]=useState(null);const[center,setCenter]=useState(mapConfig.JNCenter);const[state,setState]=useState({showingInfoWindow:false});const[address,setAddress]=useState(props.address);const[searchBox,setSearchBox]=useState();const[place,setPlace]=useState();const bounds=props.mapViewProps.zone===\"JAFZAN\"?mapConfig.JAFZA_NORTH_BOUNDS:props.mapViewProps.zone===\"JAFZAS\"?mapConfig.JAFZA_SOUTH_BOUNDS:mapConfig.DUBAI_LOGISTICS_BOUNDS;const paths=props.mapViewProps.zone===\"JAFZAN\"?mapConfig.JAFZA_NORTH_POLYGON:props.mapViewProps.zone===\"JAFZAS\"?mapConfig.JAFZA_SOUTH_POLYGON:mapConfig.DUBAI_LOGISTICS_POLYGON;useEffect(()=>{if(props.mapViewProps.latLng)setCenter(props.mapViewProps.latLng);else if(props.mapViewProps.zone==\"JAFZAS\")setCenter(mapConfig.JSCenter);else if(props.mapViewProps.zone==\"JAFZAN\")setCenter(mapConfig.JNCenter);else if(props.mapViewProps.zone==\"DUBAIS\")setCenter(mapConfig.DLCenter);else setCenter(mapConfig.DLCenter);var str=props.mapViewProps.selectedAdd;if(str===null||str===void 0?void 0:str.includes(\",\")){var arr=str===null||str===void 0?void 0:str.split(\",\");var fst=arr===null||arr===void 0?void 0:arr.splice(0,1).join(\"\");var rest=arr===null||arr===void 0?void 0:arr.join(\",\");setAddress(rest);setPlace(fst);}else{setAddress(str);setPlace(\"\");}},[props.mapViewProps]);const handleMapClick=function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}if(centerChanged(args[0].latLng)){setCenter({lat:args[0].latLng.lat(),lng:args[0].latLng.lng()});console.log(\"onClick args: \",args);setPlace();console.log(\"mapref\",map);Geocode.fromLatLng(args[0].latLng.lat(),args[0].latLng.lng(),mapConfig.apiKey).then(response=>{console.log(\"map\",response);const address=response.results[0].formatted_address;console.log(\"formatted_address :: \"+address);setAddress(address);props.mapViewProps.getAddressFromMap({add:address,loc:response.results[0].geometry.location});},error=>{console.error(error);});}};const onMarkerClick=e=>{console.log(\"marker\",e);setState({showingInfoWindow:!state.showingInfoWindow});};const options={restriction:{latLngBounds:bounds,strictBounds:false},streetViewControl:mapConfig.streetViewControl,mapTypeControl:mapConfig.mapTypeControl,fullscreenControl:mapConfig.fullscreenControl,clickableIcons:mapConfig.clickableIcons,zoom:mapConfig.zoomLevel};const onLoad=autocomplete=>{console.log(\"autocomplete: \",autocomplete);setSearchBox(autocomplete);};const onPlaceChanged=()=>{if(searchBox!==null){console.log(\"autocomplete\",searchBox.getPlace());if(centerChanged(searchBox.getPlace().geometry.location)){setCenter({lat:searchBox.getPlace().geometry.location.lat(),lng:searchBox.getPlace().geometry.location.lng()});const address=searchBox.getPlace().formatted_address;const place=searchBox.getPlace().name;setAddress(address);setPlace(place);console.log(place+\", \"+address);props.mapViewProps.getAddressFromMap({add:place+\", \"+address,loc:searchBox.getPlace().geometry.location});}}else{console.log(\"Autocomplete is not loaded yet!\");}};const centerChanged=latLng=>{props.mapViewProps.handleError(\"\");const jafza=new window.google.maps.Polygon({paths:paths});if(window.google.maps.geometry.poly.containsLocation(latLng,jafza))return true;else{setAddress(\"\");setPlace(\"\");props.mapViewProps.getAddressFromMap(\"\");props.mapViewProps.handleError(\"Location is outside of selected zone\");}};return isLoaded?/*#__PURE__*/React.createElement(GoogleMap,{id:\"map-view\",mapContainerStyle:containerStyle,center:center,zoom:12,onClick:!props.mapViewProps.isContainerEdit?handleMapClick:{},ref:ref=>{setMap(ref);},options:options,onBoundsChanged:e=>console.log(\"bounds\",e)},/*#__PURE__*/React.createElement(Marker,{position:center,onClick:onMarkerClick},state.showingInfoWindow&&/*#__PURE__*/React.createElement(InfoWindow,{position:center,onCloseClick:onMarkerClick},/*#__PURE__*/React.createElement(\"div\",{style:divStyle},/*#__PURE__*/React.createElement(\"div\",{style:{textAlign:\"center\"}},/*#__PURE__*/React.createElement(\"b\",null,/*#__PURE__*/React.createElement(\"u\",null,place))),/*#__PURE__*/React.createElement(\"div\",{style:{textAlign:\"center\"}},address?address:props.mapViewProps.zone===\"JAFZAN\"?\"JAFZA North Area\":props.mapViewProps.zone===\"JAFZAS\"?\"JAFZA South Area\":\"Dubai Logistics City\")))),!props.mapViewProps.isContainerEdit&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Autocomplete,{onLoad:onLoad,onPlaceChanged:onPlaceChanged,bounds:bounds,restrictions:{country:\"ae\"}},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",className:\"auto-complete-input\",placeholder:\"Search Location Here\"}))),/*#__PURE__*/React.createElement(Polygon,{paths:paths,options:{fillColor:\"transparent\",strokeColor:\"rgb(5 33 95)\",strokeOpacity:1,strokeWeight:1,clickable:false,draggable:false,editable:false,geodesic:false,zIndex:1}})):/*#__PURE__*/React.createElement(React.Fragment,null);}export default React.memo(MapView);","map":{"version":3,"sources":["D:/DT/ptmsCheckOutNew/New-MobileApp/src/pages/MapView.js"],"names":["React","useEffect","useState","GoogleMap","useJsApiLoader","useLoadScript","Marker","InfoWindow","Autocomplete","Polygon","mapConfig","Geocode","containerStyle","width","height","divStyle","color","fontFamily","fontSize","maxWidth","MapView","props","isLoaded","id","googleMapsApiKey","apiKey","libraries","map","setMap","center","setCenter","JNCenter","state","setState","showingInfoWindow","address","setAddress","searchBox","setSearchBox","place","setPlace","bounds","mapViewProps","zone","JAFZA_NORTH_BOUNDS","JAFZA_SOUTH_BOUNDS","DUBAI_LOGISTICS_BOUNDS","paths","JAFZA_NORTH_POLYGON","JAFZA_SOUTH_POLYGON","DUBAI_LOGISTICS_POLYGON","latLng","JSCenter","DLCenter","str","selectedAdd","includes","arr","split","fst","splice","join","rest","handleMapClick","args","centerChanged","lat","lng","console","log","fromLatLng","then","response","results","formatted_address","getAddressFromMap","add","loc","geometry","location","error","onMarkerClick","e","options","restriction","latLngBounds","strictBounds","streetViewControl","mapTypeControl","fullscreenControl","clickableIcons","zoom","zoomLevel","onLoad","autocomplete","onPlaceChanged","getPlace","name","handleError","jafza","window","google","maps","poly","containsLocation","isContainerEdit","ref","textAlign","country","fillColor","strokeColor","strokeOpacity","strokeWeight","clickable","draggable","editable","geodesic","zIndex","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  useJsApiLoader,\r\n  useLoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n  Autocomplete,\r\n  Polygon,\r\n} from \"@react-google-maps/api\";\r\nimport { mapConfig } from \"./../util/Config\";\r\nimport Geocode from \"react-geocode\";\r\nimport \"./MapView.scss\";\r\n\r\nconst containerStyle = {\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n};\r\n\r\nconst divStyle = {\r\n  color: \"#434343\",\r\n  fontFamily: \"Dubai\",\r\n  fontSize: 14,\r\n  maxWidth: \"200px\",\r\n};\r\n\r\nfunction MapView(props) {\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: \"google-map-script\",\r\n    googleMapsApiKey: mapConfig.apiKey,\r\n    libraries: mapConfig.libraries,\r\n  });\r\n  const [map, setMap] = useState(null);\r\n  const [center, setCenter] = useState(mapConfig.JNCenter);\r\n  const [state, setState] = useState({ showingInfoWindow: false });\r\n  const [address, setAddress] = useState(props.address);\r\n  const [searchBox, setSearchBox] = useState();\r\n  const [place, setPlace] = useState();\r\n  const bounds =\r\n    props.mapViewProps.zone === \"JAFZAN\"\r\n      ? mapConfig.JAFZA_NORTH_BOUNDS\r\n      : props.mapViewProps.zone === \"JAFZAS\"\r\n      ? mapConfig.JAFZA_SOUTH_BOUNDS\r\n      : mapConfig.DUBAI_LOGISTICS_BOUNDS;\r\n\r\n  const paths =\r\n    props.mapViewProps.zone === \"JAFZAN\"\r\n      ? mapConfig.JAFZA_NORTH_POLYGON\r\n      : props.mapViewProps.zone === \"JAFZAS\"\r\n      ? mapConfig.JAFZA_SOUTH_POLYGON\r\n      : mapConfig.DUBAI_LOGISTICS_POLYGON;\r\n\r\n  useEffect(() => {\r\n    if (props.mapViewProps.latLng) setCenter(props.mapViewProps.latLng);\r\n    else if (props.mapViewProps.zone == \"JAFZAS\") setCenter(mapConfig.JSCenter);\r\n    else if (props.mapViewProps.zone == \"JAFZAN\") setCenter(mapConfig.JNCenter);\r\n    else if (props.mapViewProps.zone == \"DUBAIS\") setCenter(mapConfig.DLCenter);\r\n    else setCenter(mapConfig.DLCenter);\r\n    var str = props.mapViewProps.selectedAdd;\r\n    if(str?.includes(\",\")) {\r\n      var arr = str?.split(\",\");\r\n      var fst = arr?.splice(0,1).join(\"\");\r\n      var rest = arr?.join(\",\");\r\n      setAddress(rest);\r\n      setPlace(fst);\r\n    } else {\r\n      setAddress(str);\r\n      setPlace(\"\");\r\n    }\r\n    \r\n  }, [props.mapViewProps]);\r\n\r\n  const handleMapClick = (...args) => {\r\n    if (centerChanged(args[0].latLng)) {\r\n      setCenter({\r\n        lat: args[0].latLng.lat(),\r\n        lng: args[0].latLng.lng(),\r\n      });\r\n      console.log(\"onClick args: \", args);\r\n      setPlace();\r\n      console.log(\"mapref\", map);\r\n      Geocode.fromLatLng(\r\n        args[0].latLng.lat(),\r\n        args[0].latLng.lng(),\r\n        mapConfig.apiKey\r\n      ).then(\r\n        (response) => {\r\n          console.log(\"map\", response);\r\n          const address = response.results[0].formatted_address;\r\n          console.log(\"formatted_address :: \" + address);\r\n          setAddress(address);\r\n          props.mapViewProps.getAddressFromMap({add: address, loc: response.results[0].geometry.location});\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const onMarkerClick = (e) => {\r\n    console.log(\"marker\", e);\r\n    setState({\r\n      showingInfoWindow: !state.showingInfoWindow,\r\n    });\r\n  };\r\n\r\n  const options = {\r\n    restriction: {\r\n      latLngBounds: bounds,\r\n      strictBounds: false,\r\n    },\r\n    streetViewControl: mapConfig.streetViewControl,\r\n    mapTypeControl: mapConfig.mapTypeControl,\r\n    fullscreenControl: mapConfig.fullscreenControl,\r\n    clickableIcons: mapConfig.clickableIcons,\r\n    zoom: mapConfig.zoomLevel,\r\n  };\r\n\r\n  const onLoad = (autocomplete) => {\r\n    console.log(\"autocomplete: \", autocomplete);\r\n    setSearchBox(autocomplete);\r\n  };\r\n\r\n  const onPlaceChanged = () => {\r\n    if (searchBox !== null) {\r\n      console.log(\"autocomplete\", searchBox.getPlace());\r\n      if (centerChanged(searchBox.getPlace().geometry.location)) {\r\n        setCenter({\r\n          lat: searchBox.getPlace().geometry.location.lat(),\r\n          lng: searchBox.getPlace().geometry.location.lng(),\r\n        });\r\n        const address = searchBox.getPlace().formatted_address;\r\n        const place = searchBox.getPlace().name;\r\n        setAddress(address);\r\n        setPlace(place);\r\n        console.log(place + \", \" + address);\r\n        props.mapViewProps.getAddressFromMap({add: place + \", \" + address, loc: searchBox.getPlace().geometry.location});\r\n      }\r\n    } else {\r\n      console.log(\"Autocomplete is not loaded yet!\");\r\n    }\r\n  };\r\n\r\n  const centerChanged = (latLng) => {\r\n    props.mapViewProps.handleError(\"\");\r\n    const jafza = new window.google.maps.Polygon({\r\n      paths: paths,\r\n    });\r\n    if (window.google.maps.geometry.poly.containsLocation(latLng, jafza))\r\n      return true;\r\n    else {\r\n      setAddress(\"\");\r\n      setPlace(\"\");\r\n      props.mapViewProps.getAddressFromMap(\"\");\r\n      props.mapViewProps.handleError(\"Location is outside of selected zone\");\r\n    }\r\n  };\r\n\r\n  return isLoaded ? (\r\n    <GoogleMap\r\n      id=\"map-view\"\r\n      mapContainerStyle={containerStyle}\r\n      center={center}\r\n      zoom={12}\r\n      onClick={\r\n        !props.mapViewProps.isContainerEdit ? handleMapClick: {}\r\n      }\r\n      ref={(ref) => {\r\n        setMap(ref);\r\n      }}\r\n      options={options}\r\n      onBoundsChanged={(e) => console.log(\"bounds\", e)}\r\n    >\r\n      <Marker position={center} onClick={onMarkerClick}>\r\n        {state.showingInfoWindow && (\r\n          <InfoWindow position={center} onCloseClick={onMarkerClick}>\r\n            <div style={divStyle}>\r\n              <div style={{ textAlign: \"center\" }}>\r\n                <b>\r\n                  <u>{place}</u>\r\n                </b>\r\n              </div>\r\n              <div style={{ textAlign: \"center\" }}>\r\n                {address\r\n                  ? address\r\n                  : props.mapViewProps.zone === \"JAFZAN\"\r\n                  ? \"JAFZA North Area\"\r\n                  : props.mapViewProps.zone === \"JAFZAS\"\r\n                  ? \"JAFZA South Area\"\r\n                  : \"Dubai Logistics City\"}\r\n              </div>\r\n            </div>\r\n          </InfoWindow>\r\n        )}\r\n      </Marker>\r\n      {!props.mapViewProps.isContainerEdit && <div>\r\n        <Autocomplete\r\n          onLoad={onLoad}\r\n          onPlaceChanged={onPlaceChanged}\r\n          bounds={bounds}\r\n          restrictions={{ country: \"ae\" }}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            className=\"auto-complete-input\"\r\n            placeholder=\"Search Location Here\"\r\n          />\r\n        </Autocomplete>\r\n      </div> }\r\n      <Polygon\r\n        paths={paths}\r\n        options={{\r\n          fillColor: \"transparent\",\r\n          strokeColor: \"rgb(5 33 95)\",\r\n          strokeOpacity: 1,\r\n          strokeWeight: 1,\r\n          clickable: false,\r\n          draggable: false,\r\n          editable: false,\r\n          geodesic: false,\r\n          zIndex: 1,\r\n        }}\r\n      />\r\n    </GoogleMap>\r\n  ) : (\r\n    <></>\r\n  );\r\n}\r\n\r\nexport default React.memo(MapView);\r\n"]},"metadata":{},"sourceType":"module"}