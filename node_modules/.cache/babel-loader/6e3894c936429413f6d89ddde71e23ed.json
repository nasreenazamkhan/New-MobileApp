{"ast":null,"code":"import*as LoginUserTypes from\"../actionTypes/AllActionTypes\";const Addresses=function(){let state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];let action=arguments.length>1?arguments[1]:undefined;switch(action.type){case LoginUserTypes.ADD_ADDRESS:if(state.length<1){return state=action.payLoad;}else{return[...state,action.payLoad];}case LoginUserTypes.REMOVE_ADDRESS://console.log(state.filter((i) => i.code !== action.payLoad));\nreturn state.filter(i=>i.code!==action.payLoad);case LoginUserTypes.UPDATE_ADDRESS://console.log(state.filter((i) => i.code !== action.payLoad));\nlet update=[...state];update.push(action.payLoad);state=action.payLoad;update.pop();return update;case LoginUserTypes.CLEAR_ALL_ADDRESS:return[];default:return state;}};export default Addresses;","map":{"version":3,"sources":["D:/DT/ptmsCheckOutNew/New-MobileApp/src/redux/reducers/Addresses.js"],"names":["LoginUserTypes","Addresses","state","action","type","ADD_ADDRESS","length","payLoad","REMOVE_ADDRESS","filter","i","code","UPDATE_ADDRESS","update","push","pop","CLEAR_ALL_ADDRESS"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,cAAZ,KAAgC,+BAAhC,CAEA,KAAMC,CAAAA,SAAS,CAAG,UAAwB,IAAvBC,CAAAA,KAAuB,2DAAf,EAAe,IAAXC,CAAAA,MAAW,2CACxC,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKJ,CAAAA,cAAc,CAACK,WAApB,CACE,GAAIH,KAAK,CAACI,MAAN,CAAe,CAAnB,CAAsB,CACpB,MAAQJ,CAAAA,KAAK,CAAGC,MAAM,CAACI,OAAvB,CACD,CAFD,IAEO,CACL,MAAO,CAAC,GAAGL,KAAJ,CAAWC,MAAM,CAACI,OAAlB,CAAP,CACD,CACH,IAAKP,CAAAA,cAAc,CAACQ,cAApB,CACE;AACA,MAAON,CAAAA,KAAK,CAACO,MAAN,CAAcC,CAAD,EAAOA,CAAC,CAACC,IAAF,GAAWR,MAAM,CAACI,OAAtC,CAAP,CACF,IAAKP,CAAAA,cAAc,CAACY,cAApB,CACE;AACA,GAAIC,CAAAA,MAAM,CAAG,CAAC,GAAGX,KAAJ,CAAb,CACAW,MAAM,CAACC,IAAP,CAAYX,MAAM,CAACI,OAAnB,EACAL,KAAK,CAAGC,MAAM,CAACI,OAAf,CACAM,MAAM,CAACE,GAAP,GACA,MAAOF,CAAAA,MAAP,CAEF,IAAKb,CAAAA,cAAc,CAACgB,iBAApB,CACE,MAAO,EAAP,CACF,QACE,MAAOd,CAAAA,KAAP,CArBJ,CAuBD,CAxBD,CA0BA,cAAeD,CAAAA,SAAf","sourcesContent":["import * as LoginUserTypes from \"../actionTypes/AllActionTypes\";\n\nconst Addresses = (state = [], action) => {\n  switch (action.type) {\n    case LoginUserTypes.ADD_ADDRESS:\n      if (state.length < 1) {\n        return (state = action.payLoad);\n      } else {\n        return [...state, action.payLoad];\n      }\n    case LoginUserTypes.REMOVE_ADDRESS:\n      //console.log(state.filter((i) => i.code !== action.payLoad));\n      return state.filter((i) => i.code !== action.payLoad);\n    case LoginUserTypes.UPDATE_ADDRESS:\n      //console.log(state.filter((i) => i.code !== action.payLoad));\n      let update = [...state];\n      update.push(action.payLoad);\n      state = action.payLoad;\n      update.pop();\n      return update;\n\n    case LoginUserTypes.CLEAR_ALL_ADDRESS:\n      return [];\n    default:\n      return state;\n  }\n};\n\nexport default Addresses;\n"]},"metadata":{},"sourceType":"module"}