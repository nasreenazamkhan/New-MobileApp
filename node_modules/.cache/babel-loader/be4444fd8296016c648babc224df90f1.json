{"ast":null,"code":"import React,{useContext,useMemo}from'react';import{AppContext}from'./AppContext';;export function connect(_ref){let{mapStateToProps=()=>({}),mapDispatchToProps={},component}=_ref;const Connect=ownProps=>{const context=useContext(AppContext);const dispatchFuncs=useMemo(()=>{const dispatchFuncs={};Object.keys(mapDispatchToProps).forEach(key=>{const oldFunc=mapDispatchToProps[key];const newFunc=function(){const dispatchFunc=oldFunc(...arguments);if(typeof dispatchFunc==='object'){context.dispatch(dispatchFunc);}else{const result=dispatchFunc(context.dispatch);if(typeof result==='object'&&result.then){result.then(dispatchObject=>{if(dispatchObject&&dispatchObject.type){context.dispatch(dispatchObject);}});}}};dispatchFuncs[key]=newFunc;});return dispatchFuncs;// eslint-disable-next-line\n},[mapDispatchToProps]);const props=useMemo(()=>{return Object.assign({},ownProps,mapStateToProps(context.state,ownProps),dispatchFuncs);// eslint-disable-next-line\n},[ownProps,context.state]);return React.createElement(component,props);};return React.memo(Connect);}","map":{"version":3,"sources":["D:/DT/ptmsCheckOutNew/New-MobileApp/src/data/connect.tsx"],"names":["React","useContext","useMemo","AppContext","connect","mapStateToProps","mapDispatchToProps","component","Connect","ownProps","context","dispatchFuncs","Object","keys","forEach","key","oldFunc","newFunc","dispatchFunc","dispatch","result","then","dispatchObject","type","props","assign","state","createElement","memo"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,OAA5B,KAA2C,OAA3C,CACA,OAASC,UAAT,KAA2B,cAA3B,CAQC,CAED,MAAO,SAASC,CAAAA,OAAT,MAA6Q,IAAlM,CAAEC,eAAe,CAAG,KAAO,EAAP,CAApB,CAA+CC,kBAAkB,CAAG,EAApE,CAA0FC,SAA1F,CAAkM,MAElR,KAAMC,CAAAA,OAAO,CAAIC,QAAD,EAAyB,CACvC,KAAMC,CAAAA,OAAO,CAAGT,UAAU,CAACE,UAAD,CAA1B,CAEA,KAAMQ,CAAAA,aAAa,CAAGT,OAAO,CAAC,IAAM,CAClC,KAAMS,CAAAA,aAAqC,CAAG,EAA9C,CACAC,MAAM,CAACC,IAAP,CAAYP,kBAAZ,EAAgCQ,OAAhC,CAAyCC,GAAD,EAAS,CAC/C,KAAMC,CAAAA,OAAO,CAAIV,kBAAD,CAA4BS,GAA5B,CAAhB,CACA,KAAME,CAAAA,OAAO,CAAG,UAAkB,CAChC,KAAMC,CAAAA,YAAY,CAAGF,OAAO,CAAC,YAAD,CAA5B,CACA,GAAI,MAAOE,CAAAA,YAAP,GAAwB,QAA5B,CAAsC,CACpCR,OAAO,CAACS,QAAR,CAAiBD,YAAjB,EACD,CAFD,IAEO,CACL,KAAME,CAAAA,MAAM,CAAGF,YAAY,CAACR,OAAO,CAACS,QAAT,CAA3B,CACA,GAAI,MAAOC,CAAAA,MAAP,GAAkB,QAAlB,EAA8BA,MAAM,CAACC,IAAzC,CAA+C,CAC7CD,MAAM,CAACC,IAAP,CAAaC,cAAD,EAAqC,CAC/C,GAAIA,cAAc,EAAIA,cAAc,CAACC,IAArC,CAA2C,CACzCb,OAAO,CAACS,QAAR,CAAiBG,cAAjB,EACD,CACF,CAJD,EAKD,CACF,CACF,CAdD,CAeAX,aAAa,CAACI,GAAD,CAAb,CAAqBE,OAArB,CACD,CAlBD,EAmBA,MAAON,CAAAA,aAAP,CACA;AACD,CAvB4B,CAuB1B,CAACL,kBAAD,CAvB0B,CAA7B,CA0BA,KAAMkB,CAAAA,KAAK,CAAGtB,OAAO,CAAC,IAAM,CAC1B,MAAOU,CAAAA,MAAM,CAACa,MAAP,CAAc,EAAd,CAAkBhB,QAAlB,CAA4BJ,eAAe,CAACK,OAAO,CAACgB,KAAT,CAAgBjB,QAAhB,CAA3C,CAAsEE,aAAtE,CAAP,CACA;AACD,CAHoB,CAGlB,CAACF,QAAD,CAAWC,OAAO,CAACgB,KAAnB,CAHkB,CAArB,CAKA,MAAO1B,CAAAA,KAAK,CAAC2B,aAAN,CAA+BpB,SAA/B,CAA0CiB,KAA1C,CAAP,CACD,CAnCD,CAoCA,MAAOxB,CAAAA,KAAK,CAAC4B,IAAN,CAAWpB,OAAX,CAAP,CACD","sourcesContent":["import React, { useContext, useMemo } from 'react';\r\nimport { AppContext } from './AppContext';\r\nimport { DispatchObject } from '../util/types';\r\nimport { AppState } from './state';\r\n\r\ninterface ConnectParams<TOwnProps, TStateProps, TDispatchProps> {\r\n  mapStateToProps?: (state: AppState, props: TOwnProps) => TStateProps,\r\n  mapDispatchToProps?: TDispatchProps,\r\n  component: React.ComponentType<any>\r\n};\r\n\r\nexport function connect<TOwnProps = any, TStateProps = any, TDispatchProps = any>({ mapStateToProps = () => ({} as TStateProps), mapDispatchToProps = {} as TDispatchProps, component }: ConnectParams<TOwnProps, TStateProps, TDispatchProps>): React.FunctionComponent<TOwnProps> {\r\n\r\n  const Connect = (ownProps: TOwnProps) => {\r\n    const context = useContext(AppContext);\r\n\r\n    const dispatchFuncs = useMemo(() => {\r\n      const dispatchFuncs: { [key: string]: any } = {};\r\n      Object.keys(mapDispatchToProps).forEach((key) => {\r\n        const oldFunc = (mapDispatchToProps as any)[key];\r\n        const newFunc = (...args: any) => {\r\n          const dispatchFunc = oldFunc(...args);\r\n          if (typeof dispatchFunc === 'object') {\r\n            context.dispatch(dispatchFunc);\r\n          } else {\r\n            const result = dispatchFunc(context.dispatch)\r\n            if (typeof result === 'object' && result.then) {\r\n              result.then((dispatchObject?: DispatchObject) => {\r\n                if (dispatchObject && dispatchObject.type) {\r\n                  context.dispatch(dispatchObject);\r\n                }\r\n              })\r\n            }\r\n          }\r\n        }\r\n        dispatchFuncs[key] = newFunc\r\n      });\r\n      return dispatchFuncs;\r\n      // eslint-disable-next-line\r\n    }, [mapDispatchToProps])\r\n\r\n\r\n    const props = useMemo(() => {\r\n      return Object.assign({}, ownProps, mapStateToProps(context.state, ownProps), dispatchFuncs);\r\n      // eslint-disable-next-line\r\n    }, [ownProps, context.state]);\r\n\r\n    return React.createElement<TOwnProps>(component, props);\r\n  }\r\n  return React.memo(Connect as any);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}