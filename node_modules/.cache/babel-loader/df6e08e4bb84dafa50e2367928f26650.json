{"ast":null,"code":"import{IonInput,IonLabel,IonText}from\"@ionic/react\";import React,{useState}from\"react\";import{getPatternValue,isValid,validateEmail,validateMobile}from\"../../util/Utilities\";import\"./TxtInput.scss\";const UnderLinedInput=_ref=>{let{label,name,type,value,onChange,required,errors,pattern,datatype,description,placeholder,icon,onBlur,readonly,setError,max}=_ref;const[validation,setvalidation]=useState(false);const checkKey=e=>{if(e.key.length>1)return true;setvalidation(!isValid(datatype,e.key));if(!isValid(datatype,e.key)){e.preventDefault();return false;}};const onInpChange=e=>{let val=e.target.value;let validate;if(type===\"tel\"&&setError){val=\"971\"+val.replace(/\\s/g,\"971\");var nameTest=validateMobile(val,max*1+3);console.log(nameTest);if(val!=null){if(!nameTest){setError(\"Please Enter \"+max+\" digit number\");}else{setError(\"\");}}console.log(\"tteeeelll\",val);}if(e.target.pattern){val=getPatternValue(val,e.target.pattern,\"-\");}if(e.target.type===\"email\"){validate=validateEmail(val);if(!validate){setError(\"Please Enter valid Mail id\");}else{setError(\"\");}console.log(validate);setvalidation(!validate);}if(!readonly)onChange(e,val,validate);};return/*#__PURE__*/React.createElement(\"div\",{className:\"form-element-group customStyle\"},/*#__PURE__*/React.createElement(\"div\",{className:\"blue-underLine\"},type===\"tel\"?/*#__PURE__*/React.createElement(IonLabel,{className:\"regularFont-textInput\"},\"971\"):/*#__PURE__*/React.createElement(React.Fragment,null),/*#__PURE__*/React.createElement(IonInput,{name:name,type:type,value:type===\"tel\"&&(value===null||value===void 0?void 0:value.substring(0,3).includes(\"971\"))?value.split(\"971\")[1]:value,spellCheck:false,autocapitalize:\"off\",onKeyDown:checkKey,onIonChange:onInpChange//clearInput={true}\n,required:required,autocomplete:\"off\",pattern:pattern,placeholder:placeholder,className:\"textInputWithBlueBorder\",onIonBlur:e=>{if(onBlur)onBlur(e);},readonly:readonly?readonly:false})),/*#__PURE__*/React.createElement(\"div\",{className:\"\"},errors&&/*#__PURE__*/React.createElement(IonText,{color:\"danger\",className:\"validation-message\"},/*#__PURE__*/React.createElement(IonLabel,{className:\"ion-padding-start\"},errors))),validation&&description&&/*#__PURE__*/React.createElement(IonText,{color:\"danger\",className:\"validation-message\"},/*#__PURE__*/React.createElement(IonLabel,{className:\"ion-padding-start\"},description)));};export default UnderLinedInput;","map":{"version":3,"sources":["D:/DT/ptmsCheckOutNew/New-MobileApp/src/components/txtinput/UnderLinedInput.tsx"],"names":["IonInput","IonLabel","IonText","React","useState","getPatternValue","isValid","validateEmail","validateMobile","UnderLinedInput","label","name","type","value","onChange","required","errors","pattern","datatype","description","placeholder","icon","onBlur","readonly","setError","max","validation","setvalidation","checkKey","e","key","length","preventDefault","onInpChange","val","target","validate","replace","nameTest","console","log","substring","includes","split"],"mappings":"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","sourcesContent":["import { IonInput, IonLabel, IonText } from \"@ionic/react\";\r\nimport React, { useState } from \"react\";\r\nimport { TextInputType } from \"../../util/DataTypes\";\r\nimport {\r\n  getPatternValue,\r\n  isValid,\r\n  validateEmail,\r\n  validateMobile,\r\n} from \"../../util/Utilities\";\r\nimport \"./TxtInput.scss\";\r\n\r\ninterface TxtInputProps {\r\n  label?: string;\r\n  name: any;\r\n  type: any;\r\n  value?: any;\r\n  onChange?: any;\r\n  required?: any;\r\n  errors?: any;\r\n  pattern?: any;\r\n  datatype?: TextInputType;\r\n  description?: string;\r\n  placeholder: string;\r\n  icon?: any;\r\n  onBlur?: any;\r\n  readonly?: boolean;\r\n  setError?: any;\r\n  max?: any;\r\n}\r\nconst UnderLinedInput: React.FC<TxtInputProps> = ({\r\n  label,\r\n  name,\r\n  type,\r\n  value,\r\n  onChange,\r\n  required,\r\n  errors,\r\n  pattern,\r\n  datatype,\r\n  description,\r\n  placeholder,\r\n  icon,\r\n  onBlur,\r\n  readonly,\r\n  setError,\r\n  max,\r\n}) => {\r\n  const [validation, setvalidation] = useState(false);\r\n  const checkKey = (e) => {\r\n    if (e.key.length > 1) return true;\r\n    setvalidation(!isValid(datatype, e.key));\r\n    if (!isValid(datatype, e.key)) {\r\n      e.preventDefault();\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const onInpChange = (e) => {\r\n    let val = e.target.value;\r\n    let validate;\r\n    if (type === \"tel\" && setError) {\r\n      val = \"971\" + val.replace(/\\s/g, \"971\");\r\n      var nameTest = validateMobile(val, max * 1 + 3);\r\n      console.log(nameTest);\r\n      if (val != null) {\r\n        if (!nameTest) {\r\n          setError(\"Please Enter \" + max + \" digit number\");\r\n        } else {\r\n          setError(\"\");\r\n        }\r\n      }\r\n      console.log(\"tteeeelll\", val);\r\n    }\r\n    if (e.target.pattern) {\r\n      val = getPatternValue(val, e.target.pattern, \"-\");\r\n    }\r\n    if (e.target.type === \"email\") {\r\n      validate = validateEmail(val);\r\n      if (!validate) {\r\n        setError(\"Please Enter valid Mail id\");\r\n      } else {\r\n        setError(\"\");\r\n      }\r\n      console.log(validate);\r\n      setvalidation(!validate);\r\n    }\r\n    if (!readonly) onChange(e, val, validate);\r\n  };\r\n  return (\r\n    <div className=\"form-element-group customStyle\">\r\n      <div className=\"blue-underLine\">\r\n        {/* <legend>{label}</legend> */}\r\n        {type === \"tel\" ? (\r\n          <IonLabel className=\"regularFont-textInput\">971</IonLabel>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <IonInput\r\n          name={name}\r\n          type={type}\r\n          value={\r\n            type === \"tel\" && value?.substring(0, 3).includes(\"971\")\r\n              ? value.split(\"971\")[1]\r\n              : value\r\n          }\r\n          spellCheck={false}\r\n          autocapitalize=\"off\"\r\n          onKeyDown={checkKey}\r\n          onIonChange={onInpChange}\r\n          //clearInput={true}\r\n          required={required}\r\n          autocomplete=\"off\"\r\n          pattern={pattern}\r\n          placeholder={placeholder}\r\n          className=\"textInputWithBlueBorder\"\r\n          onIonBlur={(e) => {\r\n            if (onBlur) onBlur(e);\r\n          }}\r\n          readonly={readonly ? readonly : false}\r\n        ></IonInput>\r\n      </div>\r\n\r\n      <div className=\"\">\r\n        {errors && (\r\n          <IonText color=\"danger\" className=\"validation-message\">\r\n            <IonLabel className=\"ion-padding-start\">{errors}</IonLabel>\r\n          </IonText>\r\n        )}\r\n      </div>\r\n      {validation && description && (\r\n        <IonText color=\"danger\" className=\"validation-message\">\r\n          <IonLabel className=\"ion-padding-start\">{description}</IonLabel>\r\n        </IonText>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnderLinedInput;\r\n"]},"metadata":{},"sourceType":"module"}