{"ast":null,"code":"import{IonItem,IonList}from\"@ionic/react\";import React,{useEffect,useState}from\"react\";import TxtInput from\"../txtinput/TxtInput\";import'./AutoComplete.scss';const AutoComplete=_ref=>{let{value,name,errors,icon,onOptionClick,onBlur,onSuggestionChange,label,suggestions,pattern,clearInput}=_ref;// const AutoComplete: React.FC<AutoCompleteProps> = forwardRef(\n//   ({\n//     value,\n//     name,\n//     errors,\n//     icon,\n//     onOptionClick,\n//     onBlur,\n//     onSuggestionChange,\n//     label,\n//     suggestions,\n//     pattern,\n//   }, ref) => {\n// useImperativeHandle<any,any>(ref, () => ({\n//   clear(){\n//     console.log(\"useImperativeHandle clearicon click\",name);\n//     setInput(\"\")\n//     setShowSuggestions(false);\n//     setFilteredSuggestions([])\n//   }\n// }));\nconst clearIcon={name:\"close-outline\",slot:\"end\",class:\"slotEnd\",iconClick:()=>{clearInput(name);}};const clear=()=>{clearInput(name);};const deleteIcon={name:\"close-circle-outline\",slot:\"end\",class:\"slotEnd\",iconClick:()=>{}};const[filteredSuggestions,setFilteredSuggestions]=useState([]);const[activeSuggestionIndex,setActiveSuggestionIndex]=useState(0);const[showSuggestions,setShowSuggestions]=useState(false);// const [input, setInput] = useState(value);\nconst[input,setInput]=useState(null);const[isSuggestionClicked,setISuggestionClicked]=useState(false);const[autocompleteIcon,setIcon]=useState(null);const[errorMessage,setErrorMessage]=useState(errors);useEffect(()=>{setErrorMessage(errors);},[errors]);useEffect(()=>{if(value){setIcon(clearIcon);}else{setIcon(icon);}},[icon]);useEffect(()=>{console.log('autocomplete useEffect suggestions',suggestions);if(suggestions&&suggestions.length>0){let unLinked=[];if(suggestions.length==1&&suggestions[0]==input){console.log(\"copy paste\");unLinked=[suggestions[0]];setISuggestionClicked(true);setIcon(icon);setFilteredSuggestions([]);setShowSuggestions(false);onOptionClick(name,suggestions[0]);}else if(suggestions){unLinked=suggestions.filter(suggestion=>suggestion.toLowerCase().indexOf(input.toLowerCase())>-1);setFilteredSuggestions(unLinked);setActiveSuggestionIndex(0);setShowSuggestions(true);setIcon(clearIcon);}}else{setFilteredSuggestions([]);// setShowSuggestions(false)\n}},[suggestions]);useEffect(()=>{console.log(\"autocomplete useEffect value changed\",value);setInput(value);},[value]);useEffect(()=>{console.log(\"autocomplete useEfect input changed\",input);setISuggestionClicked(false);if(!input||input.length==0){setFilteredSuggestions([]);setShowSuggestions(false);setIcon(icon);}},[input]);useEffect(()=>{if(isSuggestionClicked){}},[isSuggestionClicked]);const onChange=async(e,value)=>{setIcon(clearIcon);onSuggestionChange(e,value);};const onSuggestionClick=suggestion=>{setISuggestionClicked(true);setShowSuggestions(false);onOptionClick(name,suggestion);setIcon(icon);};return/*#__PURE__*/React.createElement(\"div\",{className:\"parent-postion\"},/*#__PURE__*/React.createElement(TxtInput,{name:name,value:value,label:label,errors:errorMessage,type:\"text\",required:true,onChange:onChange,datatype:\"TEXT\",placeholder:label,icon:autocompleteIcon,onBlur:e=>{console.log(\"Autocomplete OnBlur\");},pattern:pattern?pattern:'',description:\" Format xxx-yyyyyyyy-zz\",clearInput:false,isClickable:true,keyDown:e=>{if(e.keyCode=='9'){console.log(\"is sugg clicked\",isSuggestionClicked);if(!isSuggestionClicked){clear();}// setISuggestionClicked(false)\n}}}),showSuggestions&&/*#__PURE__*/ // <div>\nReact.createElement(IonList,{className:\"suggestion-list\"},filteredSuggestions&&filteredSuggestions.map((suggestion,index)=>/*#__PURE__*/React.createElement(IonItem,{className:\"suggestion\",onClick:()=>onSuggestionClick(suggestion),key:suggestion+index},suggestion)),(!filteredSuggestions||filteredSuggestions.length===0)&&/*#__PURE__*/React.createElement(IonItem,{className:\"suggestion\"},\"No Suggestions Found\"))// </div>\n);};// });\nexport default AutoComplete;","map":{"version":3,"sources":["D:/DT/ptmsCheckOutNew/New-MobileApp/src/components/AutoComplete/AutoComplete.tsx"],"names":["IonItem","IonList","React","useEffect","useState","TxtInput","AutoComplete","value","name","errors","icon","onOptionClick","onBlur","onSuggestionChange","label","suggestions","pattern","clearInput","clearIcon","slot","class","iconClick","clear","deleteIcon","filteredSuggestions","setFilteredSuggestions","activeSuggestionIndex","setActiveSuggestionIndex","showSuggestions","setShowSuggestions","input","setInput","isSuggestionClicked","setISuggestionClicked","autocompleteIcon","setIcon","errorMessage","setErrorMessage","console","log","length","unLinked","filter","suggestion","toLowerCase","indexOf","onChange","e","onSuggestionClick","keyCode","map","index"],"mappings":"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","sourcesContent":["import { IonAlert, IonContent, IonIcon, IonInput, IonItem, IonList, IonPopover, IonSelect, IonSelectOption, IonText } from \"@ionic/react\";\r\nimport { Autocomplete } from \"@react-google-maps/api\";\r\nimport { compassSharp } from \"ionicons/icons\";\r\nimport React, { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\r\nimport VariableValues from \"../../redux/reducers/VariableValues\";\r\nimport { fetchContainers, fetchDeclarations } from \"../../services/EndPointApi\";\r\nimport TxtInput from \"../txtinput/TxtInput\";\r\nimport './AutoComplete.scss';\r\n\r\ninterface AutoCompleteProps {\r\n  value?: any;\r\n  name: string;\r\n  errors: any;\r\n  icon: any;\r\n  onOptionClick: (name: string, valx: string) => any;\r\n  onSuggestionChange: (e: any, value: any) => any;\r\n  onBlur?: any;\r\n  label: string;\r\n  suggestions: any;\r\n  pattern?: string,\r\n  clearInput : any;\r\n}\r\n\r\nconst AutoComplete: React.FC<AutoCompleteProps> = ({\r\n  value,\r\n  name,\r\n  errors,\r\n  icon,\r\n  onOptionClick,\r\n  onBlur,\r\n  onSuggestionChange,\r\n  label,\r\n  suggestions,\r\n  pattern,\r\n  clearInput\r\n}) => {\r\n\r\n  // const AutoComplete: React.FC<AutoCompleteProps> = forwardRef(\r\n  //   ({\r\n  //     value,\r\n  //     name,\r\n  //     errors,\r\n  //     icon,\r\n  //     onOptionClick,\r\n  //     onBlur,\r\n  //     onSuggestionChange,\r\n  //     label,\r\n  //     suggestions,\r\n  //     pattern,\r\n  //   }, ref) => {\r\n \r\n  // useImperativeHandle<any,any>(ref, () => ({\r\n\r\n  //   clear(){\r\n  //     console.log(\"useImperativeHandle clearicon click\",name);\r\n  //     setInput(\"\")\r\n  //     setShowSuggestions(false);\r\n  //     setFilteredSuggestions([])\r\n  //   }\r\n\r\n  // }));\r\n\r\n\r\n  const clearIcon = {\r\n    name: \"close-outline\",\r\n    slot: \"end\",\r\n    class: \"slotEnd\",\r\n    iconClick: () => {\r\n      clearInput(name);\r\n    },\r\n  };\r\n\r\n  const clear = () => {\r\n    clearInput(name);\r\n  }\r\n\r\n\r\n  const deleteIcon = {\r\n    name: \"close-circle-outline\",\r\n    slot: \"end\",\r\n    class: \"slotEnd\",\r\n    iconClick: () => {\r\n\r\n    }\r\n  };\r\n\r\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\r\n  const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0);\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n  // const [input, setInput] = useState(value);\r\n  const [input, setInput] = useState(null);\r\n  const [isSuggestionClicked, setISuggestionClicked] = useState(false);\r\n  const [autocompleteIcon, setIcon] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(errors);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    setErrorMessage(errors)\r\n  }, [errors])\r\n\r\n  useEffect(() => {\r\n    if(value){\r\n      setIcon(clearIcon)\r\n    }else{\r\n      setIcon(icon)\r\n    }\r\n  }, [icon])\r\n\r\n  useEffect(() => {\r\n    console.log('autocomplete useEffect suggestions', suggestions)\r\n    if (suggestions && suggestions.length > 0) {\r\n      let unLinked = [];\r\n      if (suggestions.length == 1 && suggestions[0] == input) {\r\n        console.log(\"copy paste\")\r\n        unLinked = [suggestions[0]];\r\n        setISuggestionClicked(true)\r\n        setIcon(icon)\r\n        setFilteredSuggestions([])\r\n        setShowSuggestions(false)\r\n        onOptionClick(name, suggestions[0])\r\n      } else if (suggestions) {\r\n        unLinked = suggestions.filter(\r\n          (suggestion) =>\r\n            suggestion.toLowerCase().indexOf(input.toLowerCase()) > -1\r\n        );\r\n        setFilteredSuggestions(unLinked);\r\n        setActiveSuggestionIndex(0);\r\n        setShowSuggestions(true);\r\n        setIcon(clearIcon)\r\n      }\r\n    } else {\r\n      setFilteredSuggestions([])\r\n      // setShowSuggestions(false)\r\n    }\r\n  }, [suggestions])\r\n\r\n   useEffect(() => {\r\n    console.log(\"autocomplete useEffect value changed\", value)\r\n    setInput(value)\r\n  }, [value])\r\n\r\n  useEffect(() => {\r\n    console.log(\"autocomplete useEfect input changed\", input)\r\n    setISuggestionClicked(false)\r\n    if (!input || input.length == 0) {\r\n      setFilteredSuggestions([])\r\n      setShowSuggestions(false);\r\n      setIcon(icon)\r\n    }\r\n  }, [input])\r\n\r\n\r\n  useEffect(()=> {\r\n      if(isSuggestionClicked){\r\n\r\n      }\r\n  },[isSuggestionClicked])\r\n\r\n\r\n  const onChange = async (e: any, value: any) => {\r\n    setIcon(clearIcon)\r\n    onSuggestionChange(e, value)\r\n  };\r\n\r\n\r\n  const onSuggestionClick = (suggestion) => {\r\n    setISuggestionClicked(true);\r\n    setShowSuggestions(false);\r\n    onOptionClick(name, suggestion)\r\n    setIcon(icon)\r\n  };\r\n\r\n  return (\r\n    <div className=\"parent-postion\">\r\n      <TxtInput\r\n        name={name}\r\n        value={value}\r\n        label={label}\r\n        errors={errorMessage}\r\n        type=\"text\"\r\n        required={true}\r\n        onChange={onChange}\r\n        datatype=\"TEXT\"\r\n        placeholder={label}\r\n        icon={autocompleteIcon}\r\n        onBlur={(e) => {\r\n          console.log(\"Autocomplete OnBlur\")\r\n        }}\r\n        pattern={pattern ? pattern : ''}\r\n        description=\" Format xxx-yyyyyyyy-zz\"\r\n        clearInput={false}\r\n        isClickable={true}\r\n        keyDown={(e) => {\r\n          if (e.keyCode == '9') {\r\n            console.log(\"is sugg clicked\", isSuggestionClicked)\r\n            if (!isSuggestionClicked) {\r\n              clear();\r\n            }\r\n            // setISuggestionClicked(false)\r\n          }\r\n        }\r\n        }\r\n      />\r\n\r\n      {\r\n        showSuggestions && (\r\n          // <div>\r\n\r\n          <IonList className={`suggestion-list`}>\r\n            {\r\n              filteredSuggestions && filteredSuggestions.map((suggestion, index) => (\r\n                <IonItem className={`suggestion`} onClick={() => onSuggestionClick(suggestion)} key={suggestion + index}>{suggestion}</IonItem>\r\n              ))\r\n\r\n\r\n            }\r\n            {\r\n              (!filteredSuggestions || filteredSuggestions.length === 0) &&\r\n              <IonItem className={`suggestion`}>{\"No Suggestions Found\"}</IonItem>\r\n            }\r\n          </IonList>\r\n\r\n          // </div>\r\n        )\r\n      }\r\n\r\n\r\n    </div>\r\n  )\r\n    }\r\n// });\r\n\r\nexport default AutoComplete"]},"metadata":{},"sourceType":"module"}