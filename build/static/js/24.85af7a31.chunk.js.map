{"version":3,"sources":["components/Texts/InformationText.tsx","components/ContainerCard.tsx","components/SortedContainerList/SortedContainerList.tsx","pages/ContainerCart/ContainerCart.tsx"],"names":["InformationText","message","className","ContainerCard","containerItem","containerClick","index","selected","onClick","iconProps","name","slot","class","styleProps","zoom","container_number","weight","pickupLocation","consigneeCode","orderValidity","consigneeDetails","SortedContainerList","item","content","isDiff","hidden","boeNumber","connect","state","declaList","Cart","numberOfSelectedContainers","VariableValues","updateContainersInCart","Store","dispatch","type","reduxActions","payLoad","addContainerListToBook","props","dataForBookTruck","console","log","isdiff","history","useHistory","showModal","setshowModal","useState","selectedIndexNumber","setselectedIndexNumber","alertPopup","setAlertPopup","alertProps","isShow","icon","alertAction","ite","actionType","declarationList","declIndex","selectedNumber","containerList","contaIndex","itemName","okButtonName","cancelButtonName","label","action","locationProps","agentHeader","openOrCloseModal","modalState","click","cartNumber","map","decla","key","referenceNumber","openDeclaDetails","onBlueFooterClick","container","push","length","footerLabel"],"mappings":"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","file":"static/js/24.85af7a31.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./InformationText.scss\";\r\n\r\ninterface informationTextProps {\r\n  message;\r\n}\r\nconst InformationText: React.FC<informationTextProps> = ({ message }) => {\r\n  return <div className=\"container-count\">Displaying {message}</div>;\r\n};\r\nexport default InformationText;\r\n","import { IonCard, IonCardContent, IonLabel } from \"@ionic/react\";\r\nimport React from \"react\";\r\nimport Icon from \"./Icon\";\r\nimport \"./ContainerCard.scss\";\r\ninterface stateProps {\r\n  containerItem;\r\n  containerClick?: (item, index) => void;\r\n  index?;\r\n}\r\ninterface ownProps {}\r\ntype containerCardProps = stateProps & ownProps;\r\n\r\nconst ContainerCard: React.FC<containerCardProps> = ({\r\n  containerItem,\r\n  containerClick,\r\n  index,\r\n}) => {\r\n  var contanerIconProps = {\r\n    name: \"container\",\r\n    slot: \"\",\r\n    class: \"zoom12\",\r\n    styleProps: { zoom: 2.8 },\r\n  };\r\n\r\n  var locationIcon = {\r\n    name: \"locationblue-icon\",\r\n    slot: \"\",\r\n    class: \"zoom12\",\r\n    zoom: 1.8,\r\n  };\r\n  return (\r\n    <IonCard\r\n      className={\r\n        containerItem.selected\r\n          ? \"outer-card boxShadow \"\r\n          : \"outer-card lightShadow\"\r\n      }\r\n      onClick={() => containerClick(containerItem, index)}\r\n    >\r\n      <IonCardContent>\r\n        <div className=\"container-card\">\r\n          <div className=\"twoItems borderBottom\">\r\n            <div className=\"eachItemLeft\">\r\n              <div className=\"container-icon\">\r\n                <Icon iconProps={contanerIconProps} />\r\n              </div>\r\n              <div className=\"decl-info\">\r\n                <span className=\"decl-number\">\r\n                  <div className=\"container-num\">\r\n                    {containerItem.container_number}\r\n                  </div>\r\n                </span>\r\n              </div>\r\n              <div className=\"decl-info\">\r\n                <span className=\"decl-number\">\r\n                  <div className=\"container-num\">{containerItem.weight}</div>\r\n                </span>\r\n              </div>\r\n              <div className=\"location-info\">\r\n                <div className=\"location-icon\">\r\n                  <span className=\"decl-number\">\r\n                    <Icon iconProps={locationIcon} />\r\n                  </span>\r\n                </div>\r\n                {/* </div>\r\n              <div className=\"decl-info\"> */}\r\n                <div className=\"decl-info\">\r\n                  <span className=\"location-label\">\r\n                    <div className=\"container-num\">\r\n                      {containerItem.pickupLocation}\r\n                    </div>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"twoItems marginTop\">\r\n            <div className=\"eachItemLeft\">\r\n              <div className=\"decl-info\">\r\n                <span className=\"decl-number\">\r\n                  {\" \"}\r\n                  <IonLabel class=\"gray-text\">Container weight</IonLabel>\r\n                </span>\r\n                <span className=\"decl-comments\">\r\n                  {containerItem.consigneeCode}\r\n                  {/* {item.consigneeDetails} */}\r\n                </span>\r\n              </div>\r\n              <div className=\"decl-info\">\r\n                <span className=\"decl-number\">\r\n                  {\" \"}\r\n                  <IonLabel class=\"gray-text\">Storage Validity</IonLabel>\r\n                </span>\r\n                <span className=\"decl-comments\">\r\n                  {containerItem.orderValidity}\r\n                  {/* {item.consigneeDetails} */}\r\n                </span>\r\n              </div>\r\n              <div className=\"decl-info\">\r\n                <span className=\"decl-number\">\r\n                  {\" \"}\r\n                  <IonLabel class=\"gray-text\">Hold Authority</IonLabel>\r\n                </span>\r\n                <span className=\"decl-comments\">\r\n                  {containerItem.consigneeDetails}\r\n                  {/* {item.consigneeDetails} */}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </IonCardContent>\r\n    </IonCard>\r\n  );\r\n};\r\nexport default ContainerCard;\r\n","import { IonLabel } from \"@ionic/react\";\r\nimport React from \"react\";\r\n\r\ninterface SortedContainerListProps {\r\n  item: any;\r\n  content: any;\r\n  isDiff: any;\r\n}\r\nconst SortedContainerList: React.FC<SortedContainerListProps> = ({\r\n  item,\r\n  content,\r\n  isDiff,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <div className=\"decla-info\" hidden={isDiff}>\r\n        <div className=\"decla-number\">\r\n          <IonLabel>{item.boeNumber}</IonLabel>\r\n        </div>\r\n        <div className=\"do-validity\">\r\n          <IonLabel class=\"validity-text\">\r\n            DO Validity: {item.boeNumber}\r\n          </IonLabel>\r\n        </div>\r\n      </div>\r\n\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\nexport default SortedContainerList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Store from \"../../redux/Store\";\r\nimport * as reduxActions from \"../../redux/actionTypes/AllActionTypes\";\r\nimport ContainerCard from \"../../components/ContainerCard\";\r\nimport \"./ContainerCart.scss\";\r\nimport { IonContent, IonItem, IonLabel, IonPage } from \"@ionic/react\";\r\nimport Header from \"../../components/Header\";\r\nimport InformationText from \"../../components/Texts/InformationText\";\r\nimport BlueFooter from \"../../components/Footer/BlueFooter\";\r\nimport SlideUpModal from \"../../components/PopUp/SlideUpModal\";\r\nimport DeclarationDetails from \"./DeclarationDetails\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SortedContainerList from \"../../components/SortedContainerList/SortedContainerList\";\r\nimport CartNumber from \"../../components/CartNumber\";\r\nimport Alert from \"../../components/alert/Alert\";\r\n\r\ninterface ownProps {\r\n  declaList;\r\n  numberOfSelectedContainers;\r\n  addContainerListToBook;\r\n  updateContainersInCart;\r\n}\r\n\r\ninterface stateProps {}\r\ntype containerCartProps = ownProps & stateProps;\r\nconst ContainerCart: React.FC<containerCartProps> = (\r\n  props,\r\n  { declaList, dataForBookTruck }\r\n) => {\r\n  console.log(props.declaList);\r\n  var dataForBookTruck: any = [];\r\n  var isdiff = \"test\";\r\n  let history = useHistory();\r\n  const [showModal, setshowModal] = useState(false);\r\n  const [selectedIndexNumber, setselectedIndexNumber] = useState<any>({});\r\n  const [alertPopup, setAlertPopup] = useState(false);\r\n\r\n  const alertProps = {\r\n    isShow: alertPopup,\r\n    message: \"\",\r\n    content: \" Are you sure to remove the container?\",\r\n    icon: \"<img src='/assets/icon/are-you-sure.svg'/>\",\r\n    alertAction: removeSelectedConainer,\r\n\r\n    itemName: \"\",\r\n    // cancelPolicy: true\r\n    okButtonName: \"Continue\",\r\n    cancelButtonName: \"Cancel\",\r\n  };\r\n\r\n  function openDeclaDetails(modalState, declIndex?, contaIndex?, item?) {\r\n    console.log(item);\r\n    setselectedIndexNumber({\r\n      declIndex: declIndex,\r\n      contaIndex: contaIndex,\r\n      item,\r\n    });\r\n    setshowModal(modalState);\r\n  }\r\n\r\n  function goToBookTruck() {\r\n    props.declaList.map((item, index) => {\r\n      item.containerList.map((container) => {\r\n        if (container.selected) {\r\n          dataForBookTruck.push(container);\r\n          //setShowPopover({ showPopover: true, event: \"\" });\r\n        }\r\n      });\r\n    });\r\n\r\n    if (dataForBookTruck.length > 0) {\r\n      props.addContainerListToBook(dataForBookTruck);\r\n      history.push(\"/bookTruckTab\");\r\n    }\r\n  }\r\n\r\n  function removeSelectedConainer(ite, actionType) {\r\n    console.log(actionType);\r\n    setAlertPopup(false);\r\n\r\n    if (actionType) {\r\n      var declarationList = props.declaList;\r\n      console.log(declarationList, selectedIndexNumber);\r\n      declarationList[selectedIndexNumber.declIndex].selected = false;\r\n      declarationList[selectedIndexNumber.declIndex].selectedNumber =\r\n        declarationList[selectedIndexNumber.declIndex].selectedNumber - 1;\r\n      declarationList[selectedIndexNumber.declIndex].containerList[\r\n        selectedIndexNumber.contaIndex\r\n      ].selected = false;\r\n\r\n      props.updateContainersInCart(\r\n        declarationList[selectedIndexNumber.declIndex].containerList[\r\n          selectedIndexNumber.contaIndex\r\n        ]\r\n      );\r\n    } else {\r\n    }\r\n  }\r\n  return (\r\n    <IonPage>\r\n      <Header\r\n        label=\"Containers\"\r\n        action=\"home\"\r\n        locationProps={props}\r\n        agentHeader={true}\r\n        // searchClick={this.onSearchClick}`Share ${speaker.name}`\r\n      />\r\n      <IonContent>\r\n        <Alert alertProps={alertProps} />\r\n        <SlideUpModal\r\n          showModal={showModal}\r\n          openOrCloseModal={(modalState) => setshowModal(modalState)}\r\n          content={\r\n            <DeclarationDetails\r\n              item={selectedIndexNumber.item}\r\n              click={() => {\r\n                setshowModal(false);\r\n                setAlertPopup(true);\r\n              }}\r\n            />\r\n          }\r\n        />\r\n        <div className=\"info-text\">\r\n          <InformationText\r\n            message={`${props.numberOfSelectedContainers.cartNumber} containers`}\r\n          />\r\n        </div>\r\n        <div className=\"container-list\">\r\n          {props.declaList?.map((decla, declIndex) =>\r\n            decla?.containerList.map((item, contaIndex) => {\r\n              return (\r\n                <div key={contaIndex}>\r\n                  {item.selected && (\r\n                    <>\r\n                      <SortedContainerList\r\n                        isDiff={isdiff === decla.referenceNumber ? true : false}\r\n                        item={item}\r\n                        content={\r\n                          <ContainerCard\r\n                            containerItem={item}\r\n                            key={contaIndex}\r\n                            containerClick={() =>\r\n                              openDeclaDetails(\r\n                                true,\r\n                                declIndex,\r\n                                contaIndex,\r\n                                item\r\n                              )\r\n                            }\r\n                          />\r\n                        }\r\n                      />\r\n                      <div hidden={true}>\r\n                        {(isdiff = decla.referenceNumber)}\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n        <div hidden={true}>\r\n          <CartNumber />\r\n        </div>\r\n      </IonContent>\r\n      <BlueFooter onBlueFooterClick={goToBookTruck} footerLabel=\"Book Truck\" />\r\n    </IonPage>\r\n  );\r\n};\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    declaList: state.Cart,\r\n    numberOfSelectedContainers: state.VariableValues,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = () => {\r\n  return {\r\n    updateContainersInCart: (item: any) => {\r\n      Store.dispatch({\r\n        type: reduxActions.UPDATE_CONTAINER_IN_CART,\r\n        payLoad: item,\r\n      });\r\n    },\r\n\r\n    addContainerListToBook: (item: any) => {\r\n      Store.dispatch({\r\n        type: reduxActions.BOOK_TRUCK_SINGLE_LOCATION,\r\n        payLoad: item,\r\n      });\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContainerCart);\r\n"],"sourceRoot":""}