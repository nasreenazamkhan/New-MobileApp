{"version":3,"sources":["components/Icon.tsx","util/Utilities.ts","components/txtinput/TxtInput.tsx","pages/login/Login.tsx"],"names":["Icon","props","classes","useStyles","propsIcon","iconProps","src","name","style","styleProps","className","class","slot","onClick","iconClick","iconName","fieldPlaceholder","console","log","createUseStyles","zoom12","zoom","slotEnd","right","bottom","disabledminus","fontSize","calenderMargin","zoom3","zoom2","slotStart","position","absolutePosition","lastIcon","isEmpty","data","trim","isValid","dataType","delimiter","replaceAll","RegExp","REGEX_MAP","test","getPatternValue","pattern","cleaned","finalstr","ctr","i","length","validateEmail","mail","validatePhone","number","validateMobile","addTimeToDateTime","date","timeToAdd","d2","Date","setMinutes","getMinutes","convertToMillSeconds","interval","timeParts","split","h","m","TxtInput","label","type","value","onChange","required","errors","datatype","description","placeholder","icon","onBlur","readonly","contactForm","max","setError","clearInput","keyDown","isClickable","validation","setvalidation","useState","width","padding","substring","includes","spellCheck","autocapitalize","onKeyDown","e","key","preventDefault","onIonChange","validate","val","target","replace","nameTest","autocomplete","onIonBlur","maxlength","minlength","expand","fill","color","PushNotifications","Device","Plugins","connect","mapDispatchToProps","setIsLoggedIn","setUsername","component","history","formSubmitted","setFormSubmitted","error","form","setForm","username","password","submitted","valid","deviceId","setDeviceId","deviceLang","setDeviceLang","deviceToken","setDeviceToken","useEffect","logDeviceInfo","logDeviceLanguageInfo","getDeviceToken","getInfo","then","info","uuid","getLanguageCode","lang","arr","shift","register","addListener","token","JSON","stringify","notification","loginClicked","async","errs","endPointHeader","userName","userType","response","doLogin","EndPoints","success","result","dataItems","accessToken","reduxActions","Store","dispatch","agentType","user","addUser","fetchAllDeclaration","userDetails","confirmDetails","push","errorGeneral","message","notificationToken","preferredLanguage","registerDeviceToDB","registerDevice","handleChange","useRef","id","alt","noValidate","onSubmit","autoComplete","login","InappBrowser","termsAndConditionUrl","arrowForwardOutline"],"mappings":"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","file":"static/js/23.c0cb70bd.chunk.js","sourcesContent":["import React from \"react\";\nimport { IonIcon } from \"@ionic/react\";\nimport \"./Icon.css\";\nimport { createUseStyles } from \"react-jss\";\n\nexport default function Icon(props: any) {\n  const classes = useStyles();\n  var propsIcon = props.iconProps; // \"inputIcon\"\n  return (\n    <IonIcon\n      src={\"assets/icon/\" + propsIcon.name + \".svg\"}\n      style={propsIcon.styleProps}\n      className={\n        propsIcon.class\n          ? classes[propsIcon.class] + \" \" + propsIcon.class\n          : // : propsIcon.login\n            // ? classes[propsIcon.class]\n            // : propsIcon.slot === \"end\"\n            // ? classes[propsIcon.class]\n            \"\"\n      }\n      slot={propsIcon.slot}\n      onClick={() =>\n        propsIcon?.iconClick\n          ? propsIcon?.iconClick(props.iconName, props.fieldPlaceholder)\n          : console.log()\n      } //{() => console.log(1111)} //{propsIcon?.iconClick}\n    ></IonIcon>\n  );\n}\nconst useStyles = createUseStyles({\n  zoom12: {\n    zoom: 1.4,\n  },\n  // slotEnd: {\n  //   position: \"absolute\",\n  //   right: 0,\n  //   zoom: 1.5,\n  //   bottom: \"1px\",\n  // },\n  slotEnd: {\n    // position: \"absolute\",\n    right: 0,\n    // zoom: 1.5,\n    bottom: \"1px\",\n  },\n  disabledminus: {\n    fontSize: \"1.6rem\",\n    right: \"-5px\",\n    //position: \"absolute\",\n    zoom: 1.5,\n    //bottom: \"1px\",\n  },\n  calenderMargin: {\n    zoom: 1.4,\n    //marginRight: \"0.5rem\",\n  },\n  zoom3: {\n    zoom: 3,\n  },\n  zoom2: {\n    zoom: 2,\n  },\n  slotStart: {\n    position: \"absolute\",\n    zoom: 1.5,\n  },\n  absolutePosition: {\n    position: \"absolute\",\n  },\n  lastIcon: {\n    zoom: \"1.5\",\n    right: \"3px\",\n    position: \"relative\",\n  },\n});\n","import { REGEX_MAP } from \"./Constants\";\r\nimport moment from \"moment\";\r\nconst milliseconds = (h, m, s) => ((h * 60 * 60 + m * 60 + s) * 1000);\r\n\r\nvar disabledHr;\r\nexport const isEmpty = (data: any) => {\r\n  if(data===null){\r\n  data=\"\"}\r\n  return data.trim() === \"\";\r\n};\r\n\r\nexport const isValid = (dataType: any, data: any, delimiter?: string) => {\r\n  if (delimiter) {\r\n    data = data.replaceAll(delimiter, \"\");\r\n  }\r\n  return new RegExp(REGEX_MAP[dataType]).test(data);\r\n};\r\n\r\nexport const getPatternValue = (data: any, pattern: any, delimiter: any) => {\r\n  if (!data || !pattern || !delimiter) {\r\n    return data;\r\n  }\r\n  var cleaned = data.replaceAll(\" \", \"\").replaceAll(delimiter, \"\");\r\n  let finalstr = \"\";\r\n  let ctr = 0;\r\n\r\n  for (let i = 0; i < pattern.length && ctr < cleaned.length; i++) {\r\n    if (pattern[i] != delimiter) {\r\n      finalstr = finalstr + cleaned[ctr];\r\n      ctr = ctr + 1;\r\n    } else {\r\n      finalstr = finalstr + delimiter;\r\n    }\r\n  }\r\n  return finalstr;\r\n};\r\n\r\nexport const stringToColour = function(str) {\r\n  var hash = 0;\r\n  for (var i = 0; i < str.length; i++) {\r\n      hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n  }\r\n  var colour = '#';\r\n  for (var i = 0; i < 3; i++) {\r\n      var value = (hash >> (i * 8)) & 0xFF;\r\n      colour += ('00' + value.toString(16)).substr(-2);\r\n  }\r\n  return colour;\r\n}\r\n\r\nexport const validateEmail=(mail) =>{\r\n  return new RegExp(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$/i).test(mail);\r\n}\r\n\r\nexport const validatePhone=(number) =>{\r\n  let regexp =  new RegExp(\"^\\\\d{8}$\");\r\n  var nameTest = regexp.test(number);\r\n  return nameTest;\r\n}\r\n\r\nexport const validateMobile=(number,length) =>{\r\n  let regexp =  new RegExp(\"^\\\\d{\"+length+\"}$\");\r\n  var nameTest = regexp.test(number);\r\n  return nameTest;\r\n}\r\n\r\nexport function addTimeToDateTime(date: any, timeToAdd: any) {\r\n  var d2 = new Date(date);\r\n  return new Date(d2.setMinutes(date.getMinutes() + timeToAdd));\r\n  //return updatedDate;\r\n}\r\n\r\nexport function setDisabledMinHr(disableHr) {\r\n  //testFun(testContent);\r\n  var disabledTime = addTimeToDateTime(new Date(), 1 * disableHr * 60 || 1);\r\n  disabledHr = disabledTime.toISOString();\r\n  return disabledHr;\r\n}\r\n\r\nexport function getDisabledMinHr() {\r\n  return disabledHr;\r\n}\r\n\r\nexport const convertToMillSeconds = (interval: string) => {\r\n  let timeParts = interval.split(\":\");\r\n  let result = milliseconds(timeParts[0], timeParts[1], 0);\r\n  // days\r\n  return result;\r\n}\r\n","import { IonButton, IonIcon, IonInput, IonLabel, IonText } from \"@ionic/react\";\r\nimport { personOutline, pulseOutline } from \"ionicons/icons\";\r\nimport { TextInputType } from \"../../util/DataTypes\";\r\nimport React, { useState } from \"react\";\r\nimport \"./TxtInput.scss\";\r\nimport {\r\n  getPatternValue,\r\n  isValid,\r\n  validateEmail,\r\n  validateMobile,\r\n} from \"../../util/Utilities\";\r\nimport { connect } from \"../../data/connect\";\r\nimport Icon from \"../Icon\";\r\ninterface TxtInputProps {\r\n  label?: string;\r\n  name: any;\r\n  type: any;\r\n  value?: any;\r\n  onChange?: any;\r\n  required?: any;\r\n  errors?: any;\r\n  pattern?: any;\r\n  datatype?: TextInputType;\r\n  description?: string;\r\n  placeholder: string;\r\n  icon?: any;\r\n  onBlur?: any;\r\n  readonly?: any;\r\n  contactForm?: any;\r\n  max?: number;\r\n  setError?: any;\r\n  clearInput?: boolean;\r\n  keyDown? : any;\r\n  isClickable?:any\r\n}\r\nconst TxtInput: React.FC<TxtInputProps> = ({\r\n  label,\r\n  name,\r\n  type,\r\n  value,\r\n  onChange,\r\n  required,\r\n  errors,\r\n  pattern,\r\n  datatype,\r\n  description,\r\n  placeholder,\r\n  icon,\r\n  onBlur,\r\n  readonly,\r\n  contactForm,\r\n  max,\r\n  setError,\r\n  clearInput,\r\n  keyDown,\r\n  isClickable\r\n}) => {\r\n  const [validation, setvalidation] = useState(false);\r\n  //const [error, seterror] = useState(\"\");\r\n  const checkKey = (e) => {\r\n    if(keyDown){\r\n      keyDown(e)\r\n    }\r\n    if (e.key.length > 1) return true;\r\n    setvalidation(!isValid(datatype, e.key));\r\n    if (!isValid(datatype, e.key)) {\r\n      e.preventDefault();\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const onInpChange = (e) => {\r\n    let val = e.target.value;\r\n    let validate;\r\n    if (type === \"tel\" && setError) {\r\n      val = \"971\" + val.replace(/\\s/g, \"971\");\r\n      var nameTest = validateMobile(val, max * 1 + 3);\r\n      console.log(nameTest);\r\n      if (val != null) {\r\n        if (!nameTest) {\r\n          setError(\"Please Enter \" + max + \" digit number\");\r\n        } else {\r\n          setError(\"\");\r\n        }\r\n      }\r\n      console.log(\"tteeeelll\", val);\r\n    }\r\n    if (e.target.pattern) {\r\n      val = getPatternValue(val, e.target.pattern, \"-\");\r\n    }\r\n    if (e.target.type === \"email\") {\r\n      validate = validateEmail(val);\r\n      if (!validate) {\r\n        setError(\"Please Enter valid Mail id\");\r\n      } else {\r\n        setError(\"\");\r\n      }\r\n      console.log(validate);\r\n      setvalidation(!validate);\r\n    }\r\n    if (!readonly) onChange(e, val, validate);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"form-element-group\"\r\n      style={contactForm ? { width: \"350px\", padding: \"0\" } : {}}\r\n    >\r\n      <fieldset>\r\n        <legend>{label}</legend>\r\n        {type === \"tel\" ? (\r\n          <IonLabel className=\"regularFont-textInput\">971</IonLabel>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <IonInput\r\n          name={name}\r\n          type={type}\r\n          value={\r\n            type === \"tel\" && value?.substring(0, 3).includes(\"971\")\r\n              ? value.split(\"971\")[1]\r\n              : value\r\n          }\r\n          spellCheck={false}\r\n          autocapitalize=\"off\"\r\n          //readonly={readonly}\r\n          onKeyDown={checkKey}\r\n          onIonChange={onInpChange}\r\n          clearInput={clearInput}\r\n          required={required}\r\n          autocomplete=\"off\"\r\n          pattern={pattern}\r\n          placeholder={placeholder}\r\n          className=\"textInput\"\r\n          onIonBlur={(e) => {\r\n            if (onBlur) onBlur(e);\r\n            else {\r\n            }\r\n          }}\r\n          maxlength={max}\r\n          minlength={max}\r\n          readonly={readonly ? readonly : false}\r\n        >\r\n          {!isClickable && icon && (\r\n            <Icon\r\n              iconProps={icon}\r\n              iconName={name}\r\n              fieldPlaceholder={placeholder}\r\n            />\r\n            // <IonIcon slot=\"primary\" icon={pulseOutline} />\r\n          )}\r\n        </IonInput>\r\n        {isClickable && icon &&(\r\n          <IonButton\r\n\r\n          className=\"icon-button\"\r\n\r\n          expand=\"full\"\r\n\r\n          fill=\"clear\"\r\n\r\n          onClick={() => icon.iconClick(name, placeholder)}\r\n\r\n        >\r\n\r\n          <Icon\r\n\r\n            iconProps={icon}\r\n\r\n            iconName={name}\r\n\r\n            fieldPlaceholder={placeholder}\r\n\r\n          />\r\n\r\n        </IonButton>\r\n        )}\r\n\r\n      </fieldset>\r\n\r\n      <div className=\"\">\r\n        {errors && (\r\n          <IonText color=\"danger\" className=\"validation-message\">\r\n            <IonLabel className=\"ion-padding-start validation-message\">\r\n              {errors}\r\n            </IonLabel>\r\n          </IonText>\r\n        )}\r\n      </div>\r\n      {validation && description && (\r\n        <IonText color=\"danger\" className=\"validation-message\">\r\n          <IonLabel className=\"ion-padding-start validation-message\">\r\n            {description}\r\n          </IonLabel>\r\n        </IonText>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TxtInput;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  IonContent,\r\n  IonPage,\r\n  IonList,\r\n  IonLabel,\r\n  IonText,\r\n  IonIcon,\r\n} from \"@ionic/react\";\r\nimport {\r\n  arrowForwardOutline,\r\n} from \"ionicons/icons\";\r\nimport \"./Login.scss\";\r\nimport { setIsLoggedIn, setUsername } from \"../../data/user/user.actions\";\r\nimport { connect } from \"../../data/connect\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { doLogin, fetchAllDeclaration, registerDeviceToDB } from \"../../services/EndPointApi\";\r\nimport * as EndPoints from \"../../util/EndPointURL\";\r\nimport TxtInput from \"../../components/txtinput/TxtInput\";\r\nimport InappBrowser from \"../../components/InappBrowser\";\r\nimport { termsAndConditionUrl } from \"../../util/Constants\";\r\nimport * as reduxActions from \"../../redux/actions/AllActions\";\r\nimport Store from \"../../redux/Store\";\r\nimport { Plugins, PushNotificationToken } from '@capacitor/core';\r\nconst { PushNotifications, Device  } = Plugins;\r\n\r\ninterface OwnProps extends RouteComponentProps {}\r\n\r\ninterface DispatchProps {\r\n  setIsLoggedIn: typeof setIsLoggedIn;\r\n  setUsername: typeof setUsername;\r\n}\r\n\r\ninterface LoginProps extends OwnProps, DispatchProps {}\r\nconst uploadIcon = {\r\n  name: \"upload-quick\",\r\n  slot: \"\",\r\n  class: \"zoom2\",\r\n};\r\nconst Login: React.FC<LoginProps> = ({\r\n  setIsLoggedIn,\r\n  history,\r\n  //setUsername: setUsernameAction,\r\n}) => {\r\n  const [formSubmitted, setFormSubmitted] = useState(false);\r\n  const [error, setError] = useState<any>({});\r\n  const [form, setForm] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    submitted: false,\r\n    valid: false,\r\n  });\r\n  const [deviceId, setDeviceId] = useState<string>(\"\");\r\n  const [deviceLang, setDeviceLang] = useState<string>(\"\");\r\n  const [deviceToken, setDeviceToken] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    console.log('useEffect')\r\n    logDeviceInfo();\r\n    logDeviceLanguageInfo();\r\n    getDeviceToken();\r\n  },[])\r\n\r\n  const logDeviceInfo = () => {\r\n    Device.getInfo().then((info) => {\r\n      console.log('deviceInfo', info);\r\n      setDeviceId(info.uuid);\r\n    });\r\n  };\r\n\r\n  const logDeviceLanguageInfo = () => {\r\n    Device.getLanguageCode().then((lang) => {\r\n      console.log('language',lang);\r\n      const arr=lang.value.split('-');\r\n      setDeviceLang(arr.shift());\r\n    });\r\n  };\r\n\r\n  const getDeviceToken = () => {\r\n    PushNotifications.register();\r\n    \r\n    // On success, we should be able to receive notifications\r\n    PushNotifications.addListener('registration',\r\n    (token: PushNotificationToken) => {\r\n      console.log(\"deviceToken\", token.value)\r\n      setDeviceToken(token.value);\r\n    });\r\n\r\n     // Some issue with our setup and push will not work\r\n     PushNotifications.addListener('registrationError', \r\n     (error) => {\r\n       console.log('Error on registration: ' + JSON.stringify(error));\r\n     }\r\n   );\r\n\r\n   // Show us the notification payload if the app is open on our device\r\n   PushNotifications.addListener('pushNotificationReceived', \r\n     (notification) => {\r\n       console.log('Push received: ' + JSON.stringify(notification));\r\n     }\r\n   );\r\n\r\n   // Method called when tapping on a notification\r\n   PushNotifications.addListener('pushNotificationActionPerformed', \r\n     (notification) => {\r\n       console.log('Push action performed: ' + JSON.stringify(notification));\r\n     }\r\n   );\r\n  }\r\n\r\n  const registerDevice = async () => {\r\n    var data = {\r\n        notificationToken : deviceToken,\r\n        preferredLanguage: deviceLang,\r\n        deviceId: deviceId\r\n    };\r\n    console.log('data - url',data +\" - \"+ EndPoints.deviceRegisterUrl);\r\n    var response = await registerDeviceToDB(EndPoints.deviceRegisterUrl, data);\r\n    console.log('apiResponse',response);\r\n  }\r\n\r\n  const loginClicked = async (e: React.FormEvent) => {\r\n    console.log('login clicked')\r\n    let errs: any = {};\r\n    e.preventDefault();\r\n    setFormSubmitted(true);\r\n\r\n    if (!form.username) {\r\n      errs.username = \"Username is required\";\r\n    }\r\n    if (!form.password) {\r\n      errs.password = \"Password is required\";\r\n    }\r\n    if (form.username && form.password) {\r\n      var endPointHeader = {\r\n        userName: form.username,\r\n        password: form.password,\r\n        userType: \"IMPORTER_APP\",\r\n      };\r\n\r\n      var response = await doLogin(EndPoints.loginUrl, endPointHeader);\r\n      if (await response.success) {\r\n        var result = response.data.data.dataItems[0];\r\n        var accessToken = await reduxActions.AddAccessToKen(result.accessToken);\r\n        if (accessToken) Store.dispatch(accessToken);\r\n\r\n        var agentType = await reduxActions.AddAgentType(\r\n          // result.user.activeCompanyCode\r\n          result.user.userType\r\n        );\r\n        if (agentType) Store.dispatch(agentType);\r\n        var addUser = await reduxActions.AddUser(result.user);\r\n        if (addUser) Store.dispatch(addUser);\r\n        // if (result.user.agents && result.user.agents.length > 0) {\r\n        //   history.push(\"/tabs\", result);\r\n        // } else {\r\n\r\n        var response = await fetchAllDeclaration(\r\n          EndPoints.fetchConfirmDetails + form.username\r\n        );\r\n        if (response.success) {\r\n          var userDetails = response.data.data.dataItems[0];\r\n\r\n          if (!response.data.data.dataItems[0].confirmDetails) {\r\n            history.push(\"/tabs/\", response);\r\n          } else {\r\n            history.push(\"/confirmDetails\", userDetails);\r\n            //history.push(\"/tabs/\", userDetails);\r\n          }\r\n        } else {\r\n          errs.errorGeneral = response.data.message;\r\n        }\r\n        // }\r\n        await setIsLoggedIn(true);\r\n        await registerDevice();\r\n        //await setUsernameAction(form.username);\r\n        //history.push(\"/tabs/\", { direction: \"none\" });\r\n      } else {\r\n        console.log(response);\r\n        errs.errorGeneral = response.data.message || response.data.error;\r\n        setError(errs);\r\n      }\r\n    }\r\n    setError(errs);\r\n  };\r\n\r\n  const handleChange = (e: any, value: any) => {\r\n    setForm({\r\n      ...form,\r\n      [e.target.name]: value,\r\n    });\r\n    setError({ ...error, [e.target.name]: \"\" });\r\n  };\r\n\r\n  var userNmaeIcon = {\r\n    name: \"username\",\r\n    slot: \"start\",\r\n    login: true,\r\n    class: \"zoom12\",\r\n  };\r\n\r\n  var passwordIcon = {\r\n    name: \"password\",\r\n    slot: \"start\",\r\n    login: true,\r\n    class: \"zoom12\",\r\n  };\r\n\r\n  const fileInput = useRef(null);\r\n\r\n  return (\r\n    <IonPage id=\"login-page\">\r\n      <IonContent>\r\n        <div className=\"main-container\">\r\n          <div className=\"login-logo\">\r\n            <img src=\"assets/img/dubai_trade_logo.png\" alt=\"Ionic logo\" />\r\n          </div>\r\n          <div className=\"form-content\">\r\n            <div className=\"login-box-header\"></div>\r\n            <form noValidate onSubmit={loginClicked} autoComplete=\"off\">\r\n              <IonList className=\"form-section\">\r\n                <div className=\"login-header\">\r\n                  Login\r\n                  <hr />\r\n                </div>\r\n                <TxtInput\r\n                  name={\"username\"}\r\n                  value={form.username}\r\n                  label=\"Username\"\r\n                  errors={error.username}\r\n                  type=\"text\"\r\n                  required={true}\r\n                  onChange={handleChange}\r\n                  datatype=\"TEXT\"\r\n                  placeholder=\"Username\"\r\n                  icon={userNmaeIcon}\r\n                />\r\n\r\n                <TxtInput\r\n                  name={\"password\"}\r\n                  value={form.password}\r\n                  label=\"Password\"\r\n                  errors={error.password}\r\n                  type=\"password\"\r\n                  required={true}\r\n                  onChange={handleChange}\r\n                  datatype=\"TEXT\"\r\n                  placeholder=\"Password\"\r\n                  icon={passwordIcon}\r\n                />\r\n\r\n                <div className=\"\">\r\n                  {error.errorGeneral && (\r\n                    <IonText\r\n                      color=\"danger\"\r\n                      className=\"validation-message genralError\"\r\n                    >\r\n                      <IonLabel className=\"ion-padding-start\">\r\n                        {error.errorGeneral}\r\n                      </IonLabel>\r\n                    </IonText>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"login-tnc\">\r\n                  <div>by clicking \"submit\" you agree to our</div>\r\n                  <div\r\n                    onClick={() => InappBrowser(termsAndConditionUrl)}\r\n                    className=\"tnc\"\r\n                  >\r\n                    terms and conditions\r\n                  </div>\r\n                </div>\r\n              </IonList>\r\n              <div className=\"button-div\">\r\n                <div className=\"button-holder\" onClick={loginClicked}>\r\n                  <IonIcon slot=\"icon-only\" icon={arrowForwardOutline} />\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </IonContent>\r\n    </IonPage>\r\n  );\r\n};\r\n\r\nexport default connect<OwnProps, {}, DispatchProps>({\r\n  mapDispatchToProps: {\r\n    setIsLoggedIn,\r\n    setUsername,\r\n  },\r\n  component: Login,\r\n});\r\n"],"sourceRoot":""}